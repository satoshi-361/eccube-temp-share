<script>
    $(function() {
        {# チェックボックスの一括選択 #}
        toggleBtnBulk('input[id^="check_"]', '.btn-bulk-wrapper');
        $('input[id^="check_"]').on('change', function() {
            $('#toggle_check_all').prop('checked', false);
            toggleBtnBulk('input[id^="check_"]', '.btn-bulk-wrapper');
        });
        $('#toggle_check_all').on('change', function() {
            var checked = $(this).prop('checked');
            if (checked) {
                $('input[id^="check_"]').prop('checked', true);
            } else {
                $('input[id^="check_"]').prop('checked', false);
            }
            toggleBtnBulk('input[id^="check_"]', '.btn-bulk-wrapper');
        });

        {# カード依頼変更メール送信処理 #}
        $('#bulkSendNotifyChangeCardMail, #order_add').on('click', function (e) {
            e.preventDefault();
            var modal = $('#sentUpdateModal');
            modal.modal();
            var eventTarget = $(e.currentTarget);
            var type = eventTarget.data('type');
            switch (type) {
                case 'mail':
                    updater = new BulkSendMail(modal, eventTarget);
                    break;
                case 'create_order':
                    updater = new BulkCreateOrder(modal, eventTarget);
                    break;
                default:
                    return;
            }
            $('.modal-title', modal).text(updater.modalTitle);
            $('.modal-body > p.modal-message', modal).html(updater.modalMessage);
            $('#bulkChange')
                .attr({
                    'data-type': eventTarget.data('type'),
                    'data-update-status-url': eventTarget.data('update-status-url'),
                    'data-notify-mail-url': eventTarget.data('notify-mail-url'),
                })
                .text(updater.modalButton);
        });
        // プログレスバーの表示を制御
        $('#bulkChange, .progressModal').on('click', function (e) {
            var eventTarget = $(e.currentTarget);
            var type = eventTarget.data('type');
            var modal = $('#sentUpdateModal');
            switch (type) {
                case 'mail':
                    updater = new BulkSendMail(modal, eventTarget) ;
                    break;
                case 'create_order':
                    var isChecked = false;
                    $('input[id^=check_]').each(function() {
                        var check = $(this).prop('checked');
                        if (check) {
                            isChecked = true;
                        }
                    });
                    if (!isChecked) {
                        alert("チェックボックスが選択されていません");
                        return false;
                    }
                    $('#form_bulk').attr('action', "{{ url('eccube_payment_lite4_admin_regular_index_add') }}");
                    $('#form_bulk').submit();
                    return;
                default:
                    return;
            }
            $('.modal-body > p.modal-message', modal).text("{{ 'admin.order.bulk_action__in_progress_message'|trans }}");
            $('button', modal).hide();
            $('.progress', modal).show();
            updater.totalCount = updater.getTotalCount();
            var updater = new BulkSendMail(modal, eventTarget);
            $('button', modal).hide();
            $('.progress', modal).show();
            updater.totalCount = updater.getTotalCount();
            var progress = new $.Deferred();
            progress.progress(function () {
                updater.progress(this, progress);
            }).fail(function () {
                updater.fail(this);
            }).always(function () {
                updater.always(this);
            })
            updater.getPromises(progress);
        });
    });
    /*
     * Super class
     */
    function ConfirmationModal(modal) {
        this.modal = modal;
        this.mailCount = 0;
        this.currentCount = 0;
        this.totalCount = 0;
    }
    ConfirmationModal.prototype = {
        modalTitle: "カード変更依頼メール送信",
        modalMessage: "この操作は取り消すことができません。",
        modalButton: "{{ 'admin.common.execute'|trans }}",
        getTotalCount: function () {
            return 1;
        },
        progress: function (result, progress) {
            $('.progress-bar', this.modal).css('width', (++this.currentCount / this.totalCount * 100) + '%');
            if (result['message']) {
                var badge = (result['status'] === 'OK')
                    ? '<span class="badge badge-success">OK</span>'
                    : '<span class="badge badge-warning">NOTICE</span>';
                $('<li>'+badge+' </li>')
                    .append($('<span></span>').text(result['message']))
                    .appendTo('#bulkErrors');
            }
            if (this.currentCount >= this.totalCount) {
                progress.resolve();
            }
        },
        fail: function (result) {
            $('<li><span class="badge badge-danger">ERROR</span> </li>')
                .append($('<span></span>').text("{{ 'admin.common.system_error'|trans }}"))
                .appendTo('#bulkErrors');
        },
        always: function (result) {
            $('.progress', this.modal).hide();
            $('.modal-body > p.modal-message', this.modal).text("{{ 'admin.order.bulk_action__complete_message'|trans }}");
            $('#bulkChangeComplete').show();
        },
        getPromises: function (progress, url) {
            return $.ajax({
                'url': url,
                'type': 'PUT',
            })
                .fail(function () {
                    progress.reject();
                    ConfirmationModal.prototype.fail.call(this);
                })
                .always(function (data) {
                    progress.notifyWith(data);
                });
        }
    };

    function SimpleSendMail(modal, eventTarget) {
        ConfirmationModal.call(this, modal);
        this.eventTarget = eventTarget;
        this.notifierCompleteMessage = '';
    }
    // extend super class
    SimpleSendMail.prototype = Object.create(ConfirmationModal.prototype, {
        constructor: {
            value: ConfirmationModal
        },
        progress: {
            value: function (result, progress) {
                if (result.mail) {
                    this.mailCount++;
                    this.notifierCompleteMessage = '{{ 'admin.order.shipping_mail_send__complete_message'|trans }}'.replace(/%count%/, this.mailCount);
                }
                ConfirmationModal.prototype.progress.call(this, result, progress);
            }
        },
        always: {
            value: function (result) {
                ConfirmationModal.prototype.always.call(this, result);
                $('.modal-body > p.modal-message', this.modal).text(this.notifierCompleteMessage);
            }
        },
        getPromises: {
            value: function (progress) {
                var url = this.eventTarget.data('update-status-url');
                return ConfirmationModal.prototype.getPromises.call(this, progress, url);
            }
        }
    });
    function BulkCreateOrder(modal) {
    }
    BulkCreateOrder.prototype = Object.create(ConfirmationModal.prototype, {
        modalTitle: {
            value: "定期受注より受注を一括作成します"
        },
        modalMessage: {
            value: "この操作は取り消すことができません。<br />決済方法が「クレジットカード決済」の場合、受注作成と同時に決済処理が行われます。"
        },
        modalButton: {
            value: "{{ 'admin.common.send'|trans }}"
        },
    })
    function BulkSendMail(modal) {
        SimpleSendMail.call(this, modal);
    }
    BulkSendMail.prototype = Object.create(SimpleSendMail.prototype, {
        constructor: {
            value: SimpleSendMail
        },
        modalTitle: {
            value: "カード変更依頼メールを送信します"
        },
        modalMessage: {
            value: "この操作は取り消すことができません。"
        },
        modalButton: {
            value: "{{ 'admin.common.send'|trans }}"
        },
        getTotalCount: {
            value: function () {
                return $('input[data-notify-mail-url]:checked').length;
            }
        },
        getPromises: {
            value: function (progress) {
                return $('input[data-notify-mail-url]:checked').map(function () {
                    var url = $(this).data('notify-mail-url');
                    return ConfirmationModal.prototype.getPromises.call(this, progress, url);
                });
            }
        }
    });
    $('#bulkChangeComplete').on('click', function() {
        location.href = '{{ url('eccube_payment_lite4_admin_regular_index', { 'resume': 1 }) }}';
    });
</script>
